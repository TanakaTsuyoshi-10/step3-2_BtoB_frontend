name: Build and deploy Node.js app to Azure Web App

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20 LTS
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install
        run: npm ci

      - name: Build (Next.js standalone)
        shell: bash
        run: |
          set -euxo pipefail
          npx next telemetry disable || true
          npm run build

          echo "=== ls .next/standalone (pre-copy) ==="
          ls -la .next/standalone | sed -n '1,200p' || true

          # server.js が無ければ即失敗（standalone 出力不全）
          [ -f ".next/standalone/server.js" ] || { 
            echo "FATAL: .next/standalone/server.js not found"; 
            echo "Tip: next.config.js に { output: 'standalone' } が必要です"; 
            exit 1; 
          }

          # 配布用フォルダ
          rm -rf deploy && mkdir -p deploy

          # フラット配置：standalone の中身を deploy/ に展開（= deploy/server.js ができる）
          cp -R .next/standalone/* deploy/

          # BUILD_ID と static は兄弟階層に置く
          mkdir -p deploy/.next/static
          cp .next/BUILD_ID deploy/.next/BUILD_ID
          cp -R .next/static/* deploy/.next/static/ || true

          # 任意: ランタイムが参照しうる追加ファイル（存在すれば）
          [ -f ".next/required-server-files.json" ] && cp ".next/required-server-files.json" "deploy/.next/required-server-files.json"
          [ -f ".next/trace" ] && cp ".next/trace" "deploy/.next/trace"

          # public があれば
          if [ -d public ]; then cp -R public deploy/public; fi

          # 実行用の最小 package.json（npm start -> node server.js）
          cat > deploy/package.json << 'EOF'
          {
            "name": "next-standalone-app",
            "private": true,
            "version": "0.0.1",
            "scripts": {
              "start": "PORT=8080 HOSTNAME=0.0.0.0 node server.js"
            },
            "engines": { "node": ">=20 <21" }
          }
          EOF

          echo "deployed $(date -u)" > deploy/DEPLOYED_AT.txt

      - name: Sanity check deploy bundle (must-have files)
        shell: bash
        run: |
          set -euxo pipefail
          ls -la deploy | sed -n '1,200p'
          [ -f deploy/server.js ] || (echo "NG: deploy/server.js missing"; exit 1)
          [ -f deploy/package.json ] || (echo "NG: deploy/package.json missing"; exit 1)
          [ -f deploy/.next/BUILD_ID ] || (echo "NG: deploy/.next/BUILD_ID missing"; exit 1)
          # standalone の中に static/public を入れていないことを確認（誤配置防止）
          ! find deploy -path '*/.next/standalone/.next/static*' | grep . || (echo "NG: static が standalone 内にあります"; exit 1)
          ! find deploy -path '*/.next/standalone/public*' | grep . || (echo "NG: public が standalone 内にあります"; exit 1)

      - name: Archive artifact
        shell: bash
        run: |
          set -euxo pipefail
          (cd deploy && zip -qr ../artifact.zip .)
          ls -lh artifact.zip
          unzip -l artifact.zip | sed -n '1,200p'
          # 中身検証
          unzip -l artifact.zip | grep -E '(^|/)server\.js$'
          unzip -l artifact.zip | grep -E '(^|/)\.next/BUILD_ID$'
          unzip -l artifact.zip | grep -E '(^|/)package\.json$'
          unzip -l artifact.zip | grep -E '(^|/)\.next/static/' || true
          unzip -l artifact.zip | grep -E '(^|/)public/' || true

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: artifact.zip
          retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: .

      - name: Inspect artifact before deploy
        shell: bash
        run: |
          set -euxo pipefail
          ls -lh artifact.zip
          unzip -l artifact.zip | sed -n '1,200p'
          unzip -l artifact.zip | grep -E '(^|/)server\.js$'
          unzip -l artifact.zip | grep -E '(^|/)\.next/BUILD_ID$'

      - name: Cooldown before deploy
        run: sleep 10

      - name: Deploy to Azure Web App (ZIP)
        uses: azure/webapps-deploy@v3
        with:
          app-name: app-002-gen10-step3-2-node-oshima2
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_97ED8F92C96E4A49A32EBE459DDE3312 }}
          package: artifact.zip

      - name: Health check (best-effort)
        if: always()
        run: |
          sleep 30
          APP_URL="https://app-002-gen10-step3-2-node-oshima2.azurewebsites.net"
          code=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL" || echo 000)
          echo "HTTP $code"