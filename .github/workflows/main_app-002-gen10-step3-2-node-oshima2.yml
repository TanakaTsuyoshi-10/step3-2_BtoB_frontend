name: Build and deploy Node.js app to Azure Web App

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # 本番値は Azure App Service のアプリ設定で上書きされます
      NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL || 'http://localhost:8000' }}
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20 LTS
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install (full)
        run: npm ci

      - name: Build
        shell: bash
        run: |
          set -euxo pipefail
          npx next telemetry disable || true
          npm run build

          echo "=== check .next/standalone ==="
          ls -la .next || true
          ls -la .next/standalone || true
          # 代表的な server エントリ候補を探索
          entry=""
          for cand in \
            ".next/standalone/server.js" \
            ".next/standalone/server.mjs" \
            ".next/standalone/server/index.js" \
            ".next/standalone/server/server.js"; do
            if [ -f "$cand" ]; then entry="$cand"; break; fi
          done
          echo "ENTRY_FOUND=${entry:-"(none)"}"

          rm -rf deploy && mkdir -p deploy

          if [ -n "$entry" ]; then
            echo "== Mode A: standalone deploy =="
            # standalone 本体を deploy 直下へ（= deploy/server.js など）
            cp -R .next/standalone/* deploy/

            # BUILD_ID / static / 追加ファイル
            mkdir -p deploy/.next
            [ -f ".next/BUILD_ID" ] && cp ".next/BUILD_ID" "deploy/.next/BUILD_ID"
            mkdir -p deploy/.next/static
            [ -d ".next/static" ] && cp -R ".next/static/"* "deploy/.next/static/" || true
            [ -f ".next/required-server-files.json" ] && cp ".next/required-server-files.json" "deploy/.next/required-server-files.json"
            [ -f ".next/trace" ] && cp ".next/trace" "deploy/.next/trace"

            # public
            [ -d public ] && cp -R public deploy/public || true

            # 実行用 package.json（node server.js）
            cat > deploy/package.json << 'EOF'
            {
              "name": "next-standalone-app",
              "private": true,
              "version": "0.0.1",
              "scripts": {
                "start": "PORT=8080 HOSTNAME=0.0.0.0 node server.js"
              },
              "engines": { "node": ">=20 <21" }
            }
            EOF

            echo MODE=A > deploy/DEPLOY_MODE.txt
          else
            echo "== Mode B: next start deploy (fallback) =="
            # dev 依存を除外した本番 node_modules を作る
            npm ci --omit=dev

            # 必要ファイルを deploy へ
            mkdir -p deploy
            cp package.json deploy/package.json
            # 本番起動は next start
            jq '.scripts.start="next start -p 8080 -H 0.0.0.0"' package.json > deploy/package.json.tmp && mv deploy/package.json.tmp deploy/package.json

            # ランタイムに必要な .next 一式
            cp -R .next deploy/.next
            # public / next.config.js など（config 参照する場合がある）
            [ -d public ] && cp -R public deploy/public || true
            [ -f next.config.js ] && cp next.config.js deploy/next.config.js || true

            # 本番 node_modules
            cp -R node_modules deploy/node_modules

            echo MODE=B > deploy/DEPLOY_MODE.txt
          fi

          echo "deployed $(date -u)" > deploy/DEPLOYED_AT.txt

      - name: Sanity check (must-have)
        shell: bash
        run: |
          set -euxo pipefail
          ls -la deploy | sed -n '1,200p'
          mode=$(cat deploy/DEPLOY_MODE.txt | cut -d= -f2)
          echo "Mode=$mode"
          if [ "$mode" = "A" ]; then
            [ -f deploy/server.js ] || (echo "NG: deploy/server.js missing (Mode A)"; exit 1)
            [ -f deploy/.next/BUILD_ID ] || (echo "NG: deploy/.next/BUILD_ID missing (Mode A)"; exit 1)
          else
            [ -d deploy/.next ] || (echo "NG: deploy/.next missing (Mode B)"; exit 1)
            [ -d deploy/node_modules ] || (echo "NG: deploy/node_modules missing (Mode B)"; exit 1)
            grep -q '"start": "next start' deploy/package.json || (echo "NG: start script not next start (Mode B)"; exit 1)
          fi
          cat deploy/DEPLOY_MODE.txt

      - name: Archive artifact
        shell: bash
        run: |
          set -euxo pipefail
          (cd deploy && zip -qr ../artifact.zip .)
          ls -lh artifact.zip
          unzip -l artifact.zip | sed -n '1,200p'
          mode=$(unzip -p artifact.zip DEPLOY_MODE.txt | cut -d= -f2)
          echo "Mode=$mode"
          if [ "$mode" = "A" ]; then
            unzip -l artifact.zip | grep -E '(^|/)server\.js$'
            unzip -l artifact.zip | grep -E '(^|/)\.next/BUILD_ID$'
          else
            unzip -l artifact.zip | grep -E '(^|/)\.next/$|(^|/)\.next/.+' >/dev/null
            unzip -l artifact.zip | grep -E '(^|/)node_modules/$|(^|/)node_modules/.+' >/dev/null
            unzip -p artifact.zip package.json | grep -q '"start": "next start -p 8080 -H 0.0.0.0"'
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: artifact.zip
          retention-days: 7

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app
          path: .

      - name: Inspect artifact before deploy
        shell: bash
        run: |
          set -euxo pipefail
          ls -lh artifact.zip
          unzip -l artifact.zip | sed -n '1,200p'
          mode=$(unzip -p artifact.zip DEPLOY_MODE.txt | cut -d= -f2)
          echo "Mode=$mode"
          if [ "$mode" = "A" ]; then
            unzip -l artifact.zip | grep -E '(^|/)server\.js$'
            unzip -l artifact.zip | grep -E '(^|/)\.next/BUILD_ID$'
          else
            unzip -l artifact.zip | grep -E '(^|/)\.next/' >/dev/null
            unzip -l artifact.zip | grep -E '(^|/)node_modules/' >/dev/null
          fi

      - name: Cooldown before deploy
        run: sleep 8

      - name: Deploy to Azure Web App (ZIP)
        uses: azure/webapps-deploy@v3
        with:
          app-name: app-002-gen10-step3-2-node-oshima2
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_97ED8F92C96E4A49A32EBE459DDE3312 }}
          package: artifact.zip

      - name: Health check (best-effort)
        if: always()
        run: |
          sleep 30
          APP_URL="https://app-002-gen10-step3-2-node-oshima2.azurewebsites.net"
          code=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL" || echo 000)
          echo "HTTP $code"