name: Deploy to Azure App Service
on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: app-002-gen10-step3-2-node-oshima2
  NODE_VERSION: '20.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      NEXT_PUBLIC_API_ENDPOINT: ${{ secrets.NEXT_PUBLIC_API_ENDPOINT != '' && secrets.NEXT_PUBLIC_API_ENDPOINT || 'https://app-002-gen10-step3-2-py-oshima2.azurewebsites.net' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js application
        env:
          NODE_ENV: production
        run: npm run build

      - name: Create deployment package
        shell: bash
        run: |
          set -euxo pipefail
          
          rm -rf deploy && mkdir -p deploy
          cp package.json deploy/package.json
          [ -f package-lock.json ] && cp package-lock.json deploy/package-lock.json || true
          cp -R .next deploy/.next
          [ -d public ] && cp -R public deploy/public || true
          [ -f next.config.js ] && cp next.config.js deploy/next.config.js || true
          
          cd deploy
          if [ -f package-lock.json ]; then
            npm ci --omit=dev
          else
            npm install --omit=dev
          fi
          cd ..
          
          echo "Deploy package created successfully"
          ls -la

      - name: Create artifact
        shell: bash
        run: |
          set -euxo pipefail
          (cd deploy && zip -qr ../artifact.zip .)
          ls -lh artifact.zip

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: artifact.zip

      - name: Health check
        if: always()
        shell: bash
        run: |
          for i in 1 2 3; do
            sleep 60
            code=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net" || echo 000)
            echo "Attempt $i: HTTP $code"
            [ "$code" = "200" ] && exit 0
          done
          exit 1