name: Deploy Frontend to Azure App Service

on:
  push:
    branches: 
      - main
      - hotfix/**
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: app-002-gen10-step3-2-node-oshima2
  NODE_VERSION: '20.x'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    env:
      NEXT_PUBLIC_API_BASE: ${{ secrets.NEXT_PUBLIC_API_BASE || 'https://app-002-gen10-step3-2-py-oshima2.azurewebsites.net/api/v1' }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies with retry
        run: |
          for i in 1 2 3; do
            echo "Attempt $i to install dependencies..."
            if npm ci --no-audit --prefer-offline; then
              echo "Dependencies installed successfully"
              break
            else
              if [ $i -eq 3 ]; then
                echo "Failed to install dependencies after 3 attempts"
                exit 1
              fi
              echo "Retrying in 10 seconds..."
              sleep 10
              rm -rf node_modules package-lock.json
              npm cache clean --force
            fi
          done

      - name: Run type check and linting
        run: |
          echo "Running type check..."
          npm run typecheck
          echo "Running linting..."
          npm run lint

      - name: Build Next.js application with retry
        env:
          NODE_ENV: production
          NEXT_PUBLIC_API_BASE: ${{ env.NEXT_PUBLIC_API_BASE }}
        run: |
          echo "Building with API base: $NEXT_PUBLIC_API_BASE"
          
          for i in 1 2 3; do
            echo "Build attempt $i..."
            if npm run build; then
              echo "Build completed successfully"
              break
            else
              if [ $i -eq 3 ]; then
                echo "Build failed after 3 attempts"
                exit 1
              fi
              echo "Build failed, cleaning and retrying in 5 seconds..."
              npm run clean
              sleep 5
            fi
          done
          
          # Verify build output
          echo "Verifying build output..."
          [ -d ".next" ] || { echo "ERROR: .next directory not found"; exit 1; }
          [ -d ".next/standalone" ] || { echo "ERROR: standalone output not found"; exit 1; }
          
          echo "---- Build verification complete ----"
          ls -la .next/
          echo "---- Standalone output ----"
          ls -la .next/standalone/ || true

      - name: Create deployment package
        run: |
          set -euxo pipefail
          
          echo "Creating deployment package..."
          rm -rf deploy && mkdir -p deploy

          # Copy standalone output (including hidden files)
          echo "Copying standalone output..."
          cp -R .next/standalone/. deploy/

          # Copy static assets
          echo "Copying static assets..."
          mkdir -p deploy/.next/static
          cp -R .next/static/. deploy/.next/static/ || true

          # Copy public directory if it exists
          if [ -d public ]; then
            echo "Copying public directory..."
            cp -R public deploy/public
          fi

          # Validation checks
          echo "Running deployment package validation..."
          [ -f "deploy/server.js" ] || { echo "ERROR: server.js missing"; exit 1; }
          [ -f "deploy/.next/BUILD_ID" ] || { echo "ERROR: .next/BUILD_ID missing"; exit 1; }
          [ -d "deploy/.next/static" ] || { echo "ERROR: .next/static missing"; exit 1; }

          echo "Deploy package structure:"
          ls -la deploy/
          echo "Deploy .next structure:"
          ls -la deploy/.next/ || true

      - name: Create deployment artifact
        run: |
          set -euxo pipefail
          echo "Creating ZIP artifact..."
          (cd deploy && zip -qr ../deploy.zip .)
          
          echo "Artifact created:"
          ls -lh deploy.zip
          
          # Verify ZIP contents
          echo "Verifying ZIP contents..."
          unzip -l deploy.zip | head -20

      - name: Deploy to Azure Web App with retry
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: deploy.zip
          
      - name: Wait for deployment to complete
        run: |
          echo "Waiting for deployment to stabilize..."
          sleep 30

      - name: Comprehensive health check
        if: always()
        run: |
          APP_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
          API_URL="${{ env.NEXT_PUBLIC_API_BASE }}"
          
          echo "Starting health checks..."
          echo "App URL: $APP_URL"
          echo "API URL: $API_URL"
          
          # App health check with extended retry
          echo "=== App Health Check ==="
          success=false
          for i in {1..8}; do
            echo "App check attempt $i/8..."
            if code=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL" 2>/dev/null); then
              echo "HTTP response: $code"
              if [ "$code" = "200" ]; then
                echo "‚úÖ App is responding correctly"
                success=true
                break
              fi
            else
              echo "‚ùå No response received"
            fi
            
            if [ $i -lt 8 ]; then
              echo "Waiting 30 seconds before retry..."
              sleep 30
            fi
          done
          
          if [ "$success" = "false" ]; then
            echo "‚ùå App health check failed after all attempts"
            exit 1
          fi
          
          # Admin health check
          echo "=== Admin Health Check ==="
          admin_success=false
          for i in {1..5}; do
            echo "Admin check attempt $i/5..."
            if code=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL/admin" 2>/dev/null); then
              echo "Admin HTTP response: $code"
              if [ "$code" = "200" ] || [ "$code" = "302" ]; then
                echo "‚úÖ Admin endpoint responding correctly"
                admin_success=true
                break
              fi
            fi
            
            if [ $i -lt 5 ]; then
              echo "Waiting 15 seconds before retry..."
              sleep 15
            fi
          done
          
          if [ "$admin_success" = "false" ]; then
            echo "‚ö†Ô∏è  Admin health check failed but continuing..."
          fi
          
          # API connectivity check
          echo "=== API Connectivity Check ==="
          if code=$(curl -s -o /dev/null -w "%{http_code}" "${API_URL}/health" 2>/dev/null || echo "000"); then
            echo "API health endpoint HTTP response: $code"
            if [ "$code" = "200" ] || [ "$code" = "404" ]; then
              echo "‚úÖ API connectivity confirmed"
            else
              echo "‚ö†Ô∏è  API returned $code (may be expected)"
            fi
          else
            echo "‚ö†Ô∏è  API health check inconclusive"
          fi
          
          echo "üéâ Deployment verification completed successfully"