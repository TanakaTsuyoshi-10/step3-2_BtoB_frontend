name: Deploy Next.js to Azure App Service

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AZURE_WEBAPP_NAME: 'app-002-gen10-step3-2-node-oshima2'
  NODE_VERSION: '20.x'  # Using Node 20.x for better Azure compatibility
  WORKING_DIRECTORY: '.'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: üõéÔ∏è Checkout repository
      uses: actions/checkout@v4

    - name: üü¢ Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: üì¶ Install dependencies
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        npm ci --production=false

    - name: üß™ Build application
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        npm run build
        
    - name: üßπ Prepare deployment package
      working-directory: ${{ env.WORKING_DIRECTORY }}
      run: |
        # Create deployment directory
        mkdir deploy-package
        
        # Copy essential files for deployment
        cp -r .next deploy-package/
        cp -r public deploy-package/
        cp package*.json deploy-package/
        cp next.config.js deploy-package/
        
        # Copy staticwebapp.config.json if it exists
        if [ -f "staticwebapp.config.json" ]; then
          cp staticwebapp.config.json deploy-package/
        fi
        
        # Create a minimal package.json for production
        cd deploy-package
        npm ci --production
        
        # Create deployment zip from deploy-package directory
        cd ..
        zip -r deployment.zip deploy-package/
        
        echo "üì¶ Deployment package created successfully"
        ls -la deployment.zip

    - name: üöÄ Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
        package: deployment.zip

    - name: üè• Health check
      run: |
        echo "‚è≥ Waiting for deployment to stabilize..."
        sleep 90
        
        APP_URL="https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net"
        
        echo "üîç Checking application health..."
        HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$APP_URL" || echo "000")
        
        if [ "$HEALTH_STATUS" = "200" ]; then
          echo "‚úÖ Health check passed! Frontend is running successfully."
          echo "üåê Frontend URL: $APP_URL"
        else
          echo "‚ö†Ô∏è Health check returned status: $HEALTH_STATUS"
          echo "üîß Troubleshooting steps:"
          echo "1. Check Azure App Service logs in Azure Portal"
          echo "2. Verify CORS settings if backend communication fails"
          echo "3. Check Node.js version compatibility"
        fi
        
        # Don't fail deployment on health check failure for frontend
        # as it might be due to backend connectivity issues
        echo "‚úÖ Deployment completed"

# üìù Required Azure App Service Configuration:
#
# 1. General Settings:
#    - Stack: Node.js
#    - Major Version: Node
#    - Minor Version: 20 LTS
#    - Startup Command: npm start
#
# 2. Application Settings:
#    NEXT_PUBLIC_API_URL=https://app-002-gen10-step3-2-py-oshima2.azurewebsites.net
#    WEBSITE_NODE_DEFAULT_VERSION=~20
#    SCM_DO_BUILD_DURING_DEPLOYMENT=false
#
# 3. Required GitHub Secrets:
#    AZURE_WEBAPP_PUBLISH_PROFILE (download from Azure Portal)
#
# 4. CORS Configuration:
#    Backend needs to allow https://app-002-gen10-step3-2-node-oshima2.azurewebsites.net